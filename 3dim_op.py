'''
  4 -- 5
0 -- 1 |
| 6 -| 7
2 -- 3

'''
OPD = [
#            0, 1, 2, 3, 4, 5, 6, 7  -0
            [1, 1, 1, 0, 1, 0, 0, 0],
            [1, 1, 0, 1, 0, 1, 0, 0],
            [1, 0, 1, 1, 0, 0, 1, 0],
            [0, 1, 1, 1, 0, 0, 0, 1],
            [1, 0, 0, 0, 1, 1, 1, 0],
            [0, 1, 0, 0, 1, 1, 0, 1],
            [0, 0, 1, 0, 1, 0, 1, 1],
            [0, 0, 0, 1, 0, 1, 1, 1]]

OPDEF = [[
#            0, 1, 2, 3, 4, 5, 6, 7  -0
            [1, 1, 1, 0, 1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --1
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 0, 1, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --2
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 1, 1, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --3
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --4
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 0, 0, 0, 1, 1, 1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --5
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 1, 0, 0, 1, 1, 0, 1],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --6
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 1, 0, 1, 0, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0]],[
#            0, 1, 2, 3, 4, 5, 6, 7 --7
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 1, 0, 1, 1, 1]],]


class mat2:
    matrix = list()
    def __init__(self, a, b, c, d):
        self.matrix = [[a, b], [c, d]]


class mat3:
    matrix = list()
    def __init__(self, a, b, c, d, e, f, g, h):
        self.matrix = [[[a, b], [c, d]], [[e, f], [g, h]]]
    def __str__(self):
        a = self.matrix
        mat_str = ''
        mat_str += '  ' + str(a[0][0][0]) + ' -- ' + str(a[0][0][1]) + '\n'
        mat_str += str(a[0][1][0]) + ' -- ' + str(a[0][1][1]) + ' |\n'
        mat_str += '| ' + str(a[1][0][0]) + ' -| ' + str(a[1][0][1]) + '\n'
        mat_str += str(a[1][1][0]) + ' -- ' + str(a[1][1][1])
        return mat_str
    def listify(self):
        a = [0, 0, 0, 0, 0, 0, 0, 0]
        b = self.matrix
        a[0] = b[0][0][0]
        a[1] = b[0][0][1]
        a[2] = b[0][1][0]
        a[3] = b[0][1][1]
        a[4] = b[1][0][0]
        a[5] = b[1][0][1]
        a[6] = b[1][1][0]
        a[7] = b[1][1][1]
        return a

def inner(v1, v2):
    sum_ = 0
    if(len(v1) != len(v2)):
        return False
    for i in range(len(v1)):
        sum_ += v1[i] * v2[i]
    return sum_

def make_trans(mat):
    mat_list = mat.listify()
    result = list()
    for i in range(8):
        temp_trans = list()
        for j in range(8):
            temp_trans.append(inner(OPDEF[i][j], mat_list))
        result.append(temp_trans)
    print(result)
    return result

def make_trans2(mat):
    mat_list = mat.listify()
    result = list()
    for i in range(8):
        result.append(inner(mat_list, OPD[i]))
    return result

def st_inner(mat,v):
    result = list()
    for i in range(8):
        temp = list()
        for j in range(8):
            temp.append(mat[i][j] * v[i])
        result.append(temp)
    print(result)
    return result

def op1(mat1, mat2):
    mat1_trans = make_trans(mat1)
    mat2_list = mat2.listify()
    result = list()
    for i in range(8):
        result.append(inner(mat2_list, mat1_trans[i]))
    return result


b = mat3(1,2,0,0,0,0,0,0)
c = mat3(1,1,0,0,0,0,0,0)
a = mat3(1,0,0,1,0,0,0,0)

print(a)
print(b)
b = op1(a, b)
print(mat3(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7]))
